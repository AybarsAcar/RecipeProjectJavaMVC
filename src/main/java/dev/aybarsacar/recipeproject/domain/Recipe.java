package dev.aybarsacar.recipeproject.domain;

import dev.aybarsacar.recipeproject.domain.enums.Difficulty;
import lombok.Data;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

/**
 * Domain Entity that represents our Recipe Table
 * Recipe is the owner of Notes, Ingredient
 */
@Data
@Entity
public class Recipe
{
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)   // auto generated value, specific to database
  private Long id;

  private String description;
  private Integer prepTime;
  private Integer cookTime;
  private Integer servings;
  private String source;
  private String url;

  @Lob
  private String directions;

  @Enumerated(value = EnumType.STRING)  // so stored as a string
  private Difficulty difficulty;

  @Lob    // so it creates the field as blob in the db
  private Byte[] image; // not good, better to add a url and an external storage like Amazon S#

  //  set up the relationship
  @OneToOne(cascade = CascadeType.ALL)
  private Notes notes;

  //  it will be stored in a property called recipe
//  recipe is the target property in the Ingredient class
  @OneToMany(cascade = CascadeType.ALL, mappedBy = "recipe")
  private Set<Ingredient> ingredients = new HashSet<>();

  @ManyToMany
  @JoinTable(name = "recipe_category",
      joinColumns = @JoinColumn(name = "recipe_id"),
      inverseJoinColumns = @JoinColumn(name = "category_id"))
  private Set<Category> categories = new HashSet<>();

  /**
   * Make it bidirectional so we dont have to do it outside of the class
   * override the default setNotes generated by Lombok
   * because we have some custom logic
   *
   * @param notes
   */
  public void setNotes(Notes notes)
  {
    this.notes = notes;
    notes.setRecipe(this);
  }

  public void addIngredient(Ingredient ingredient)
  {
    ingredient.setRecipe(this);
    this.ingredients.add(ingredient);
  }
}
